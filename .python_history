import bcrypt
bcrypt.hashpw(b"admin123", bcrypt.gensalt()).decode()
pm2 restart skystrike-api
import bcrypt
bcrypt.checkpw(b"admin123", b"$2b$12$d0kQ53kL4ztKZ3/OoBy0..1mPAHCMNaFheWd5nYYs8hqMi/xGZMSy")
nano ~/skystrike_fullstack_final_release/backend/data/users.json
curl -H "Authorization: Bearer <PASTE_TOKEN>" https://staging.skystrike.me/api/dashboard
e
exit
import jwt
token = jwt.encode({"sub": "admin"}, "skystrike-secret-key", algorithm="HS256")
print(token)
curl -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiJ9.WsIIf3NpCOa1qjHqPAFfamW0Zi3wxVSMjY5Z5TZZ0_E" https://staging.skystrike.me/api/dashboard
from bots.ironcondor import run as run_ironcondor
run_ironcondor(ticker="SPY", force_entry=True)
import os
print(os.getenv("TRADIER_PAPER_ACCESS_TOKEN"))  # should match what you pasted into .env
import os
print(os.getenv("TRADIER_PAPER_ACCESS_TOKEN"))  # should match what you pasted into .env
import os
print(os.getenv("TRADIER_PAPER_ACCESS_TOKEN"))
print(os.getenv("TRADIER_MODE"))
hon3
Python 3.10.12 (main, May 27 2025, 17:12:29) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import os
>>> print(os.getenv("TRADIER_PAPER_ACCESS_TOKEN"))
None
>>> print(os.getenv("TRADIER_MODE"))
None
>>>
import os
print(">> ENV TEST")
print("TRADIER_MODE:", os.getenv("TRADIER_MODE"))
print("TRADIER_PAPER_ACCESS_TOKEN:", os.getenv("TRADIER_PAPER_ACCESS_TOKEN"))
pm2 restart skystrike-api --update-env
import asyncio
from trading_engine import run_smart_trading_engines
asyncio.run(run_smart_trading_engines())
curl -X GET "http://localhost:8000/api/broker/quote/SPY" \
  -H "Authorization: Bearer YOUR_VALID_JWT"
import os
from dotenv import load_dotenv
load_dotenv()
print("🧪 DEBUG: TRADIER_PAPER_ACCESS_TOKEN =", os.getenv("TRADIER_PAPER_ACCESS_TOKEN"))
print("🧪 DEBUG: TRADIER_MODE =", os.getenv("TRADIER_MODE"))
from dotenv import load_dotenv
load_dotenv(dotenv_path=".env", override=True)
import os
print("✅ Token loaded:", os.getenv("TRADIER_PAPER_ACCESS_TOKEN"))
from dotenv import load_dotenv
import os
load_dotenv()
print("JWT_SECRET:", os.getenv("JWT_SECRET"))
exit()
# login_routes.py (or wherever your login endpoint lives)
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
import jwt
from datetime import datetime, timedelta
import os
router = APIRouter()
JWT_SECRET = os.getenv("JWT_SECRET")
JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60
class LoginRequest(BaseModel):
    username: str
    password: str
def create_access_token(data: dict):
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, JWT_SECRET, algorithm=JWT_ALGORITHM)
    return encoded_jwt
@router.post("/api/login")
async def login(request: LoginRequest):
    # TODO: Replace this with real user validation
    if request.username == "admin" and request.password == "admin123":
        token = create_access_token({"sub": request.username})
        return {"token": token, "user": {"username": request.username}}
    else:
        raise HTTPException(status_code=401, detail="Invalid credentials")
exit()
from auth import verify_token
from db.models import User
from backend.db.models import User
from backend.db.session import SessionLocal
from passlib.context import CryptContext
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
def change_password(username: str, new_password: str):
    db = SessionLocal()
    user = db.query(User).filter(User.username == username).first()
    if not user:
        print(f"User '{username}' not found.")
        db.close()
        return
    user.password_hash = pwd_context.hash(new_password)
    db.commit()
    db.close()
    print(f"Password for '{username}' updated successfully.")
if __name__ == "__main__":
    change_password("admin", "webflows3")
import importlib
importlib.import_module("backend.bots.ironcondor")
from backend.bots import ironcondor
print(ironcondor)
from backend.services.tradier_api import get_quote
print(get_quote("SPX", mode="paper"))
print(get_quote("SPY", mode="paper"))
./venv/bin/python3
>>> from backend.services.tradier_api import get_quote
>>> get_quote("SPY", mode="paper")
./venv/bin/python3
>>> from backend.services.tradier_api import get_quote
>>> get_quote("SPY", mode="paper")
print(get_quote("INVALID", mode="paper"))
from backend.services.tradier_api import get_quote
print(get_quote("SPY", mode="paper"))         # ✅ should work
print(get_quote("INVALID", mode="paper"))     # ❌ should raise HTTPError
print(get_quote("SPX", mode="paper"))
>>>
KeyboardInterrupt
>>> print(get_quote("SPX", mode="paper"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'get_quote' is not defined
>>>
KeyboardInterrupt
>>>
print(get_quote("SPX", mode="paper"))
exit
from backend.services.tradier_api import get_quote
print(get_quote("SPX", mode="paper"))
