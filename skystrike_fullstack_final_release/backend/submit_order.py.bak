# backend/submit_order.py

from typing import Dict, Any, List

from backend.bots.iron_condor   import build_order as ic_build
from backend.bots.kingcondor    import build_order as kc_build
from backend.bots.spread        import build_order as spread_build
from backend.bots.csp           import build_order as csp_build
from backend.bots.wheel         import build_order as wheel_build
from backend.bots.trend         import build_order as trend_build
from backend.bots.replicator    import build_order as rep_build
from backend.bots.copybot       import build_order as copy_build
from backend.bots.dcabot        import build_order as dca_build
from backend.bots.gridbot       import build_order as grid_build
from backend.bots.momentumbot   import build_order as momentum_build
from backend.bots.scalper       import build_order as scalp_build
from backend.bots.pairstrader   import build_order as pair_build

from backend.bots.base import TradierClient

# Instantiate the sync client (paper trading)
_tradier = TradierClient(sandbox=True)

BUILD_MAP = {
    "ironcondor":  ic_build,
    "kingcondor":  kc_build,
    "spread":      spread_build,
    "csp":         csp_build,
    "wheel":       wheel_build,
    "trend":       trend_build,
    "replicator":  rep_build,
    "copybot":     copy_build,
    "dcabot":      dca_build,
    "gridbot":     grid_build,
    "momentumbot": momentum_build,
    "scalper":     scalp_build,
    "pairstrader": pair_build
}


async def run_bot_with_params(
    bot_name: str,
    ticker:   str,
    contracts: int,
    dte:      int,
    mode:     str  # ignored, since TradierClient picks via .env
) -> Dict[str, Any]:
    """
    Dispatch to the correct Tradier endpoint based on bot_name.
    - 'equitybuy' ? equity order
    - single-leg builds (dict) ? submit_option
    - multi-leg builds (list) ? submit_multileg
    """
    name = bot_name.replace("_", "").lower()

    # Equity shortcut
    if name == "equitybuy":
        return _tradier.submit_equity(
            symbol=ticker,
            side="buy",
            qty=contracts
        )

    # Lookup the bot’s build_order()
    build_fn = BUILD_MAP.get(name)
    if not build_fn:
        raise ValueError(f"Unsupported bot: {bot_name}")

    # Generate the leg payload synchronously
    payload = build_fn(ticker, contracts, dte, mode)
    if not payload:
        raise RuntimeError(f"{bot_name}.build_order returned no legs")

    # Single-leg?
    if isinstance(payload, dict):
        return _tradier.submit_option(
            symbol=payload["option_symbol"],
            side=payload["side"],
            quantity=payload["quantity"]
        )

    # Multi-leg combo
    # payload is a List[dict] with {"option_symbol", "side", "quantity"}
    return _tradier.submit_multileg(
        symbol=ticker,
        legs=payload
    )
